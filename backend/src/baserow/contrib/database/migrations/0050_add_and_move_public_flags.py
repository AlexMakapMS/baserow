# Generated by Django 3.2.6 on 2021-12-14 09:16
import math
import secrets

from django.db import migrations, models


def update_batch_size():
    # Exists as a function purely so tests can mock the return_value
    return 1000


def reverse(apps, schema_editor):
    FormView = apps.get_model("database", "FormView")

    print("Migrating view public and slug properties back to form view...")
    for f in FormView.objects.all():
        view = f.view_ptr
        f.public_temp = view.public
        f.slug_temp = view.slug
        f.save()


# noinspection PyPep8Naming
def forward(apps, schema_editor):
    FormView = apps.get_model("database", "FormView")
    View = apps.get_model("database", "View")

    _copy_slug_and_public_from_form_to_view(FormView, View)
    _generate_slugs_for_views(View)


def _copy_slug_and_public_from_form_to_view(FormView, View):
    print("Migrating form view public and slug properties to View...")
    updated_form_views = []
    for f in FormView.objects.all():
        view = f.view_ptr
        view.public = f.public_temp
        view.slug = f.slug_temp
        updated_form_views.append(view)
    View.objects.bulk_update(updated_form_views, fields=["public", "slug"])
    print("Done with form view")


def _generate_slugs_for_views(View):
    views_to_generate_slugs_for = View.objects.filter(slug__isnull=True)
    view_count = views_to_generate_slugs_for.count()
    batch_size = update_batch_size()
    print(f"Generating slugs for {view_count} views in batches of {batch_size}")
    updated_views = []
    current_batch = 1
    total_batches = math.ceil(view_count / batch_size)
    for view in views_to_generate_slugs_for.iterator():
        view.slug = secrets.token_urlsafe()
        updated_views.append(view)
        if len(updated_views) >= batch_size:
            print(f"Updating batch number {current_batch}/{total_batches}")
            View.objects.bulk_update(updated_views, fields=["slug"])
            updated_views.clear()
            current_batch += 1
    print(f"Updating batch number {current_batch}/{total_batches}")
    View.objects.bulk_update(updated_views, fields=["slug"])


class Migration(migrations.Migration):

    dependencies = [
        ("database", "0049_urlfield_2_textfield"),
    ]

    operations = [
        migrations.RenameField(
            model_name="formview",
            old_name="public",
            new_name="public_temp",
        ),
        migrations.RenameField(
            model_name="formview",
            old_name="slug",
            new_name="slug_temp",
        ),
        migrations.AddField(
            model_name="view",
            name="public",
            field=models.BooleanField(
                default=False,
                help_text="Indicates whether the view is publicly accessible to "
                "visitors.",
            ),
        ),
        migrations.AddField(
            model_name="view",
            name="slug",
            field=models.SlugField(
                null=True,
                blank=True,
                help_text="The unique slug where the view can be accessed publicly on.",
                unique=True,
                db_index=True,
            ),
        ),
        migrations.RunPython(forward, reverse),
        migrations.AlterField(
            model_name="view",
            name="slug",
            field=models.SlugField(
                help_text="The unique slug where the view can be accessed publicly on.",
                default=secrets.token_urlsafe,
                unique=True,
                db_index=True,
            ),
        ),
        migrations.RemoveField(
            model_name="formview",
            name="public_temp",
        ),
        migrations.RemoveField(
            model_name="formview",
            name="slug_temp",
        ),
    ]
