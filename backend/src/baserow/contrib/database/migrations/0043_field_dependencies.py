# Generated by Django 3.2.6 on 2021-11-01 09:38
import django.db.models.deletion
from django.core.exceptions import ObjectDoesNotExist
from django.db import migrations, models

from baserow.contrib.database.formula import FormulaHandler


# noinspection PyPep8Naming


def reverse(apps, schema_editor):
    pass


# noinspection PyPep8Naming
def forward(apps, schema_editor):
    Field = apps.get_model("database", "Field")
    FormulaField = apps.get_model("database", "FormulaField")
    FieldDependency = apps.get_model("database", "FieldDependency")
    LinkRowField = apps.get_model("database", "LinkRowField")

    _build_graph_from_scratch(FieldDependency, FormulaField, LinkRowField, Field)
    _calculate_all_formula_internal_fields_in_order(FormulaField)


# noinspection PyPep8Naming
def _build_graph_from_scratch(FieldDependency, FormulaField, LinkRowField, Field):
    for link_row in LinkRowField.objects.filter(trashed=False).all():
        related_primary_field = next(
            f for f in link_row.link_row_table.field_set.all() if f.primary
        )
        FieldDependency.objects.create(
            dependency=link_row, via=link_row, dependant=related_primary_field
        )

    for formula in FormulaField.objects.filter(trashed=False).all():
        expr = FormulaHandler.raw_formula_to_untyped_expression(formula.formula)
        dependency_field_names = FormulaHandler.get_field_dependencies_from_expression(
            expr
        )

        table = formula.table
        for new_dependency_field_name in dependency_field_names:
            try:
                FieldDependency.objects.create(
                    dependency=table.field_set.get(name=new_dependency_field_name),
                    depedant=formula,
                )
            except Field.DoesNotExist:
                FieldDependency.objects.create(
                    depedant=formula,
                    broken_reference_field_name=new_dependency_field_name,
                )


# noinspection PyPep8Naming
def _calculate_all_formula_internal_fields_in_order(FormulaField):
    already_fixed_fields = set()
    for formula in FormulaField.objects.filter(trashed=False).all():
        if formula not in already_fixed_fields:
            _recursively_setup_parents(FormulaField, already_fixed_fields, formula)
            _setup_and_save_formula_field_internals(already_fixed_fields, formula)
    for formula in FormulaField.objects.filter(trashed=True).all():
        formula.internal_formula = formula.formula
        formula.requires_refresh_after_insert = False
        formula.save()


# noinspection PyPep8Naming
def _recursively_setup_parents(FormulaField, already_fixed_fields, field):
    for dependency in field.dependencies.all():
        try:
            formula_field = FormulaField.objects.get(id=dependency.id)
            _recursively_setup_parents(
                FormulaField, already_fixed_fields, formula_field
            )
            _setup_and_save_formula_field_internals(already_fixed_fields, formula_field)
        except FormulaField.DoesNotExist:
            pass


def _setup_and_save_formula_field_internals(already_fixed_fields, formula_field):
    FormulaHandler.recalculate_internal_formula_fields(formula_field, None)
    formula_field.save()
    already_fixed_fields.add(formula_field)


class Migration(migrations.Migration):

    dependencies = [
        ("database", "0042_add_other_trashed_indexes"),
    ]

    operations = [
        migrations.CreateModel(
            name="FieldDependencyEdge",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="formulafield",
            name="internal_formula",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="formulafield",
            name="requires_refresh_after_insert",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name="FieldDependencyNode",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "broken_reference_field_name",
                    models.TextField(blank=True, null=True),
                ),
                (
                    "children",
                    models.ManyToManyField(
                        blank=True,
                        related_name="parents",
                        through="database.FieldDependencyEdge",
                        to="database.FieldDependencyNode",
                        through_fields=("parent", "child"),
                    ),
                ),
                (
                    "field",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nodes",
                        to="database.field",
                    ),
                ),
                (
                    "table",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nodes",
                        to="database.table",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="fielddependencyedge",
            name="parent",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children_edges",
                to="database.fielddependencynode",
            ),
        ),
        migrations.AddField(
            model_name="fielddependencyedge",
            name="child",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="parent_edges",
                to="database.fielddependencynode",
            ),
        ),
        migrations.AddField(
            model_name="fielddependencyedge",
            name="via",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="vias",
                to="database.field",
            ),
        ),
        migrations.RunPython(forward, reverse),
    ]
