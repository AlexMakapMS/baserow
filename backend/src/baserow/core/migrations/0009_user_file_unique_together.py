# Generated by Django 2.2.24 on 2021-08-05 13:55

import pathlib

from django.db import migrations
from django.db.models import Count


def forward(apps, schema_editor):
    """
    This migration will check if there are duplicate user files and will change the
    original name to something unique by adding a number to the filename.
    """

    UserFile = apps.get_model("core", "UserFile")
    duplicates = (
        UserFile.objects.values("original_name", "sha256_hash")
        .annotate(Count("id"))
        .order_by()
        .filter(id__count__gt=1)
    )
    for duplicate in duplicates:
        user_files = UserFile.objects.filter(
            original_name=duplicate["original_name"],
            sha256_hash=duplicate["sha256_hash"],
        ).order_by("id")
        for index, user_file in enumerate(user_files):
            if index == 0:
                continue

            user_file.original_name = find_unique_user_file_name(UserFile, user_file)
            user_file.save()


def find_unique_user_file_name(UserFile, user_file):
    path = pathlib.Path(user_file.original_name)
    extension = path.suffix[1:].lower()
    if extension:
        extension = f".{extension}"
        name = user_file.original_name[: -len(extension)]
    else:
        name = user_file.original_name

    i = 1
    while True:
        i += 1
        append = f" {i}"
        max_chars = 255 - len(append) - len(extension)
        new_name = f"{name[:max_chars]}{append}{extension}"

        if not UserFile.objects.filter(
            original_name=new_name, sha256_hash=user_file.sha256_hash
        ).exists():
            return new_name


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0008_trash"),
    ]

    operations = [
        migrations.RunPython(forward, migrations.RunPython.noop),
        migrations.AlterUniqueTogether(
            name="userfile",
            unique_together={("original_name", "sha256_hash")},
        ),
    ]
