version: "3.4"

x-common-variables: &common-variables
  DOMAIN:
  CADDY: yes
  PRIVATE_BACKEND_URL: backend:8000
  PRIVATE_WEBFRONTEND_URL: web-frontend:3000
  WEB_FRONTEND_PORT: ${WEB_FRONTEND_PORT:-3000}

x-common-backend-variables: &common-backend-variables
  SECRET_KEY: ${SECRET_KEY:?Please provide a condidential secret key used by Baserow's Django Backend to secure signed data}
  DATABASE_PASSWORD: ${DATABASE_PASSWORD:?Please provide a secure database password for the postgres db service user to use, prior to version 1.9 this defaulted to "baserow"}
  REDIS_PASSWORD: ${REDIS_PASSWORD:?Please provide a secure redis password}
  MIGRATE_ON_STARTUP: ${MIGRATE_ON_STARTUP:-true}
  SYNC_TEMPLATES_ON_STARTUP: ${SYNC_TEMPLATES_ON_STARTUP:-true}
  DATABASE_USER: ${DATABASE_USER:-baserow}
  DATABASE_NAME: ${DATABASE_NAME:-baserow}
  ADDITIONAL_APPS:
  EMAIL_SMTP:
  EMAIL_SMTP_HOST:
  EMAIL_SMTP_PORT:
  EMAIL_SMTP_USE_TLS:
  EMAIL_SMTP_USER:
  EMAIL_SMTP_PASSWORD:
  FROM_EMAIL:
  DISABLE_ANONYMOUS_PUBLIC_VIEW_WS_CONNECTIONS:

services:
  # A caddy reverse proxy sitting in-front of all the services.
  caddy:
    image: caddy:2.4.6
    user: 9999:9999
    restart: unless-stopped
    environment:
      <<: *common-variables
      CADDY_LISTEN_PORT:
    ports:
      - "${HOST_PUBLISH_IP:-0.0.0.0}:${WEB_FRONTEND_PORT:-3000}:80"
      - "${HOST_PUBLISH_IP:-0.0.0.0}:443:443"
    depends_on:
      - media-volume-fixer
    volumes:
      - $PWD/deploy/all-in-one/Caddyfile:/etc/caddy/Caddyfile
      - media:/baserow/media
      - caddy_config:/config
      - caddy_data:/data
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost/caddy-health-check" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      local:

  backend:
    build:
      dockerfile: ./backend/Dockerfile
      context: .
    image: baserow_backend:latest
    restart: unless-stopped
    environment:
    depends_on:
      - db
      - redis
      - caddy
      - media-volume-fixer
    volumes:
      - media:/baserow/media
    networks:
      local:

  web-frontend:
    build:
      context: .
      dockerfile: ./web-frontend/Dockerfile
    image: baserow_web-frontend:latest
    restart: unless-stopped
    environment:
      <<: *common-backend-variables
    depends_on:
      - backend
    networks:
      local:

  celery:
    image: baserow_backend:latest
    restart: unless-stopped
    build:
      dockerfile: ./backend/Dockerfile
      context: .
    environment:
      - CADDY=yes
      - WEB_FRONTEND_PORT=${WEB_FRONTEND_PORT:-3000}
      - DOMAIN
      - ADDITIONAL_APPS
      - EMAIL_SMTP
      - EMAIL_SMTP_HOST
      - EMAIL_SMTP_PORT
      - EMAIL_SMTP_USE_TLS
      - EMAIL_SMTP_USER
      - EMAIL_SMTP_PASSWORD
      - FROM_EMAIL
      - DISABLE_ANONYMOUS_PUBLIC_VIEW_WS_CONNECTIONS
    command: celery-worker
    healthcheck:
      test: [ "CMD", "./docker/docker-entrypoint.sh", "celery-worker-healthcheck" ]
    depends_on:
      - backend
    volumes:
      - media:/baserow/media
    networks:
      local:

  celery-export-worker:
    image: baserow_backend:latest
    restart: unless-stopped
    build:
      dockerfile: ./backend/Dockerfile
      context: .
    command: celery-exportworker
    healthcheck:
      test: [ "CMD", "./docker/docker-entrypoint.sh", "celery-exportworker-healthcheck" ]
    depends_on:
      - backend
    environment:
      - CADDY=yes
      - WEB_FRONTEND_PORT=${WEB_FRONTEND_PORT:-3000}
      - DOMAIN
      - ADDITIONAL_APPS
      - EMAIL_SMTP
      - EMAIL_SMTP_HOST
      - EMAIL_SMTP_PORT
      - EMAIL_SMPT_USE_TLS
      - EMAIL_SMTP_USER
      - EMAIL_SMTP_PASSWORD
      - FROM_EMAIL
      - DISABLE_ANONYMOUS_PUBLIC_VIEW_WS_CONNECTIONS
    volumes:
      - media:/baserow/media
    networks:
      local:

  celery-beat-worker:
    image: baserow_backend:latest
    restart: unless-stopped
    build:
      dockerfile: ./backend/Dockerfile
      context: .
    command: celery-beat
    healthcheck:
      test: [ "CMD-SHELL", "exit 0" ]
    depends_on:
      - backend
    environment:
      - CADDY=yes
      - WEB_FRONTEND_PORT=${WEB_FRONTEND_PORT:-3000}
      - DOMAIN
      - ADDITIONAL_APPS
      - EMAIL_SMTP
      - EMAIL_SMTP_HOST
      - EMAIL_SMTP_PORT
      - EMAIL_SMTP_USE_TLS
      - EMAIL_SMTP_USER
      - EMAIL_SMTP_PASSWORD
      - FROM_EMAIL
      - DISABLE_ANONYMOUS_PUBLIC_VIEW_WS_CONNECTIONS
    volumes:
      - media:/baserow/media
    networks:
      local:

  db:
    # Please ensure the postgres-client's major version in the backend image is kept in
    # sync with this major version so pg_dump remains compatible.
    image: postgres:11.3
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DATABASE_USER:-baserow}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-baserow}
      - POSTGRES_DB=${DATABASE_NAME:-baserow}
    healthcheck:
      test: [ "CMD-SHELL", "su postgres -c pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      local:
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    image: redis:6.0
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
    networks:
      local:

  # When switching between dev and local the media files in the media volume will be
  # owned by different users. Ensure that we chown them to the user appropriate for the
  # environment here.
  media-volume-fixer:
    image: bash:4.4
    command: bash -c 'chown 9999:9999 -R /baserow/media /config /data && echo "Successfully fixed docker volume permissions, exiting fixer as nothing else to do."'
    volumes:
      - media:/baserow/media
      - caddy_config:/config
      - caddy_data:/data
    networks:
      local:

volumes:
  pgdata:
  media:
  caddy_data:
  caddy_config:

networks:
  local:
    driver: bridge
