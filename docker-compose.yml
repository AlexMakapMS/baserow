version: "3.7"

services:
  db:
    container_name: db
    image: postgres:11.3
    environment:
      - POSTGRES_USER=${DATABASE_USER:-baserow}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-baserow}
      - POSTGRES_DB=${DATABASE_NAME:-baserow}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      local:
    volumes:
      - pgdata:/var/lib/postgresql/data

  redis:
    container_name: redis
    image: redis:6.0
    networks:
      local:

  mjml:
    container_name: mjml
    image: liminspace/mjml-tcpserver:0.10
    # mjml is based off the node image which creates a non root node user we can run as
    user: "1000:1000"
    networks:
      local:

  backend:
    container_name: backend
    build:
      dockerfile: ./backend/Dockerfile
      context: .
    image: baserow_backend:latest
    environment:
      - MIGRATE_ON_STARTUP=${MIGRATE_ON_STARTUP:-true}
      - SYNC_TEMPLATES_ON_STARTUP=${SYNC_TEMPLATES_ON_STARTUP:-true}
      - DATABASE_USER=${DATABASE_USER:-baserow}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD:-baserow}
      - DATABASE_NAME=${DATABASE_NAME:-baserow}
      - ADDITIONAL_APPS
      - PUBLIC_BACKEND_URL=http://localhost:${NGINX_PORT:-80}/api
      - PUBLIC_WEB_FRONTEND_URL=http://localhost:${NGINX_PORT:-80}
      - MEDIA_URL=http://localhost:${NGINX_PORT:-80}/media/
    depends_on:
      - db
      - redis
      - mjml
    volumes:
      - baserow_media:/media
    networks:
      local:

  celery:
    container_name: celery
    image: baserow_backend:latest
    command: celery
    depends_on:
      - backend
    volumes:
      - baserow_media:/media
    networks:
      local:

  web-frontend:
    container_name: web-frontend
    build:
      context: .
      dockerfile: ./web-frontend/Dockerfile
    image: baserow_web-frontend:latest
    environment:
      - PUBLIC_BACKEND_URL=http://localhost:${NGINX_PORT:-80}
      - PUBLIC_WEB_FRONTEND_URL=http://localhost:${NGINX_PORT:-80}
      - ADDITIONAL_MODULES
    depends_on:
      - backend
    networks:
      local:

  nginx:
    container_name: nginx
    build: ./nginx
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - backend
      - web-frontend
    volumes:
      - baserow_media:/media
    networks:
      local:

volumes:
  pgdata:
  baserow_media:

networks:
  local:
    driver: bridge
