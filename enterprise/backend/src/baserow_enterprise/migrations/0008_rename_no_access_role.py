# Generated by Django 3.2.13 on 2022-11-25 16:22

from django.db import migrations


def forward(apps, schema_editor):
    Role = apps.get_model("baserow_enterprise", "Role")
    RoleAssignment = apps.get_model("baserow_enterprise", "RoleAssignment")
    GroupUser = apps.get_model("core", "GroupUser")

    if Role.objects.filter(uid="NO_ROLE").exists():
        if not Role.objects.filter(uid="NO_ACCESS").exists():
            # No no_access role we can rename no_role safely
            Role.objects.filter(uid="NO_ROLE").update(uid="NO_ACCESS")
        else:
            no_role = Role.objects.get(uid="NO_ROLE")
            no_access = Role.objects.get(uid="NO_ACCESS")

            # Let's check the RoleAssignments
            if not RoleAssignment.objects.filter(role=no_role).exists():
                # No role assignment for no_role we can safely delete it.
                no_role.delete()
            elif not RoleAssignment.objects.filter(role=no_access).exists():
                # No role assignment for no_access we can safely delete it.
                no_access.delete()
                Role.objects.filter(uid="NO_ROLE").update(uid="NO_ACCESS")
            else:
                # Crap, we have assignment for both no_role and no_access. It shouldn't
                # happen but we never know.
                raise Exception(
                    "Both no_role and no_access role have assigned role. "
                    "Please fix the situation manually before migrating"
                )

    GroupUser.objects.filter(permissions="NO_ROLE").update(permissions="NO_ACCESS")


class Migration(migrations.Migration):

    dependencies = [
        ("baserow_enterprise", "0007_teamsubject_baserow_ent_created_01fb9f_idx"),
    ]

    operations = [
        migrations.RunPython(forward, migrations.RunPython.noop),
    ]
